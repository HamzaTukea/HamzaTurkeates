@page "/HouseIndex"
@using HamzaTestAPP.Data
@inject HamzaTestAPP.IRepository.IHouseRepository houseRepository

<div class="row">
    <div class="col-md-4">
        <div class="row">
            <div class="col-md-4">
                <label> House ID :</label>
            </div>
            <div class="col-md-8">
                <input @bind="house.HouseId" style="width:100%" placeholder="House ID" />
            </div>
        </div><div class="row">
            <div class="col-md-4">
                <label> Adress :</label>
            </div>
            <div class="col-md-8">
                <input @bind="house.Adress" style="width:100%" placeholder="Adress" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                <label> Type Of Offer :</label>
            </div>
            <div class="col-md-8">
                <input @bind="house.TypeOfOffer" style="width:100%" placeholder="Type Of Offer" />
            </div>
        </div>
        <p>
            <InputFile  OnChange="OnInputFileChange" multiple  />
        </p>

        @if (imageUrls.Count > 0) { 
        <div class="card" style="width:30rem;">
            <div class="card-body">
                @foreach (var imageurl in imageUrls)
                {
                    <img class="rounded-1 " src="@imageurl" />
                    <input @bind="house.Image" style="width:100%" />
                    
                }
               
            </div>
        </div>
        }
                  
        
        <div class="row">
            <div class="col-md-4"></div>
            <div class="col-md-8">
                <button class="btn btn-primary" @onclick="@(e => Save())">Save</button>
                <button class="btn btn-danger" @onclick="@(e => Reset())" style="float:right;">Reset</button>
            </div>
        </div>
    </div>
    <div class="col-md-8">
        <table class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th>House ID</th>
                    <th>Adress</th>
                    <th>Type Of Offer</th>
                    <th>Image</th>
                    
                </tr>
            </thead>
            <tbody>
                @if (housess.Count() > 0)
                {
                    @foreach (var ho in housess)
                    {
                        <tr>
                            <td>@ho.HouseId</td>
                            <td>@ho.Adress</td>
                            <td>@ho.TypeOfOffer</td>
                            <td>@ho.Image</td>
                            <td>
                                <button class="btn btn-primary" @onclick="@(e => Edit(@ho.HouseId))">Update</button>
                                <button class="btn btn-danger" @onclick="@(e => Delete(@ho.HouseId))">Delete</button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

@code {

    Houses house = new Houses();
    List<Houses> housess = new List<Houses>();

    private IList<string> imageUrls = new List<string>();

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var maxAllowedFiles = 3;
        var format = "image/png";

        foreach (var imageFile in e.GetMultipleFiles(maxAllowedFiles))
        {
            var resizedFile = await imageFile.RequestImageFileAsync(format, 100, 100);
            var buffer = new byte[resizedFile.Size];

            resizedFile.OpenReadStream().ReadAsync(buffer);

            var imageUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            imageUrls.Add(imageUrl);
        }

    }

    private void GetHouses()
    {
        housess = houseRepository.GetsHouses();
    }

    protected override async Task OnInitializedAsync()
    {
        GetHouses();
    }

    private void Save()

    {
        houseRepository.Save(house);
        Reset();
        GetHouses();
    }
    private void Update()

    {
        houseRepository.Update(house);
        Reset();
        GetHouses();
    }
    private void Reset()
    {
        Houses house = new Houses();
    }
    private void Edit(string houseId)
    {
        house = houseRepository.GetHouse(houseId);
    }
    private void Delete(string houseId)
    {
        houseRepository.Delete(houseId);
        GetHouses();
    }



}